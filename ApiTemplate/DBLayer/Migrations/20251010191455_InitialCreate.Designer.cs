// <auto-generated />
using System;
using DBLayer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DBLayer.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20251010191455_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DBLayer.Models.TblActionType", b =>
                {
                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ActionTypeID");

                    b.Property<DateTime>("ActionTypeCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("ActionTypeIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ActionTypeTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("ActionTypeId")
                        .HasName("PK__tblActio__62FE4C04B5ED9D4D");

                    b.ToTable("tblActionType", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblBranch", b =>
                {
                    b.Property<long>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("BranchID");

                    b.Property<string>("BranchRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("BranchTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("BranchId")
                        .HasName("PK__tblBranc__A1682FA549DC0CD4");

                    b.ToTable("tblBranch", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblCompany", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("CompanyID");

                    b.Property<string>("CompanyRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("CompanyTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CompanyId")
                        .HasName("PK__tblCompa__2D971C4C49A740A2");

                    b.ToTable("tblCompany", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblCompanyUnit", b =>
                {
                    b.Property<long>("CompanyUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("CompanyUnitID");

                    b.Property<string>("CompanyUnitRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("CompanyUnitTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CompanyUnitId")
                        .HasName("PK__tblCompa__8942C15160273FA8");

                    b.ToTable("tblCompanyUnit", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblDepartment", b =>
                {
                    b.Property<long>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("DepartmentID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DepartmentRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("DepartmentTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("DepartmentId")
                        .HasName("PK__tblDepar__B2079BCD048EDF58");

                    b.ToTable("tblDepartment", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblDivision", b =>
                {
                    b.Property<long>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("DivisionID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DivisionRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("DivisionTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("DivisionId")
                        .HasName("PK__tblDivis__20EFC6880BD734EE");

                    b.ToTable("tblDivision", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblInvoice", b =>
                {
                    b.Property<long>("TranId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("TranID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint")
                        .HasColumnName("ItemID");

                    b.Property<long>("PricingListId")
                        .HasColumnType("bigint")
                        .HasColumnName("PricingListID");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<string>("TranRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("TranId")
                        .HasName("PK__tblInvoi__F7089629B6D53D4A");

                    b.ToTable("tblInvoice", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblItem", b =>
                {
                    b.Property<int>("TranId")
                        .HasColumnType("int")
                        .HasColumnName("TranID");

                    b.Property<string>("ItemRefNo")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ItemTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<double?>("SaleRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TranId")
                        .HasName("PK__tblItem__F7089629020F2AD7");

                    b.ToTable("tblItem", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblOrganisation", b =>
                {
                    b.Property<long>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(-1L)
                        .HasColumnName("OrganisationID");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("OrganisationRefNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<string>("OrganisationTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.HasKey("OrganisationId")
                        .HasName("PK__tblOrgan__722346BCA4BE2335");

                    b.ToTable("tblOrganisation", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblPermission", b =>
                {
                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("ActionTypeID");

                    b.Property<DateTime>("PermissionCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("PermissionIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("ResourceID");

                    b.HasKey("PermissionId")
                        .HasName("PK__tblPermi__EFA6FB0F4AD1F430");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ResourceId");

                    b.ToTable("tblPermission", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblPricingList", b =>
                {
                    b.Property<int>("TranId")
                        .HasColumnType("int")
                        .HasColumnName("TranID");

                    b.Property<DateTime>("EffictiveFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EffictiveTo")
                        .HasColumnType("datetime");

                    b.Property<int?>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("ItemID");

                    b.Property<string>("PricingTitle")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("");

                    b.Property<double?>("SaleRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("TranId")
                        .HasName("PK__tblPrici__F7089629E1C238BE");

                    b.ToTable("tblPricingList", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblResetToken", b =>
                {
                    b.Property<int>("ResetTokenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TokenType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserID");

                    b.HasKey("ResetTokenId");

                    b.HasIndex("TokenType");

                    b.HasIndex("UserId");

                    b.ToTable("tblResetToken", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblResource", b =>
                {
                    b.Property<int>("ResourceId")
                        .HasColumnType("int")
                        .HasColumnName("ResourceID");

                    b.Property<DateTime>("ResourceCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("ResourceIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ResourceId")
                        .HasName("PK__tblResou__4ED1814FFC50535C");

                    b.ToTable("tblResource", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime>("RoleCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("RoleIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("RoleTitle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("RoleId")
                        .HasName("PK__tblRole__8AFACE3A3A043175");

                    b.ToTable("tblRole", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblRolePermission", b =>
                {
                    b.Property<int>("RolePermissionId")
                        .HasColumnType("int")
                        .HasColumnName("RolePermissionID");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("PermissionID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<DateTime>("RolePermissionCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("RolePermissionIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("RolePermissionId")
                        .HasName("PK__tblRoleP__120F469A84A97AB2");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("tblRolePermission", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblTokenType", b =>
                {
                    b.Property<string>("TokenType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TokenType");

                    b.ToTable("tblTokenType", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblUser", b =>
                {
                    b.Property<long>("Userid")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(233)
                        .IsUnicode(false)
                        .HasColumnType("varchar(233)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Userid")
                        .HasName("PK__tblUsers__1797D02499DA0056");

                    b.ToTable("tblUsers", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblUserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("UserID");

                    b.Property<DateTime>("UserRoleCreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("UserRoleIsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("UserRoleId")
                        .HasName("PK__tblUserR__3D978A55AEDF4DB3");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("tblUserRole", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.Test1", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Tname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tname");

                    b.HasKey("Id")
                        .HasName("PK__test1__3213E83FE4C48E12");

                    b.ToTable("test1", (string)null);
                });

            modelBuilder.Entity("TblRoleHierarchy", b =>
                {
                    b.Property<int>("ParentRoleId")
                        .HasColumnType("int")
                        .HasColumnName("ParentRoleID");

                    b.Property<int>("ChildRoleId")
                        .HasColumnType("int")
                        .HasColumnName("ChildRoleID");

                    b.HasKey("ParentRoleId", "ChildRoleId")
                        .HasName("PK_RoleHierarchy");

                    b.HasIndex("ChildRoleId");

                    b.ToTable("tblRoleHierarchy", (string)null);
                });

            modelBuilder.Entity("DBLayer.Models.TblPermission", b =>
                {
                    b.HasOne("DBLayer.Models.TblActionType", "ActionType")
                        .WithMany("TblPermissions")
                        .HasForeignKey("ActionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Action");

                    b.HasOne("DBLayer.Models.TblResource", "Resource")
                        .WithMany("TblPermissions")
                        .HasForeignKey("ResourceId")
                        .IsRequired()
                        .HasConstraintName("FK_Permission_Resource");

                    b.Navigation("ActionType");

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DBLayer.Models.TblResetToken", b =>
                {
                    b.HasOne("DBLayer.Models.TblTokenType", "TokenTypeNavigation")
                        .WithMany("TblResetTokens")
                        .HasForeignKey("TokenType")
                        .IsRequired()
                        .HasConstraintName("FK_ResetToken_TokenType");

                    b.HasOne("DBLayer.Models.TblUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ResetToken_User");

                    b.Navigation("TokenTypeNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DBLayer.Models.TblRolePermission", b =>
                {
                    b.HasOne("DBLayer.Models.TblPermission", "Permission")
                        .WithMany("TblRolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Permission");

                    b.HasOne("DBLayer.Models.TblRole", "Role")
                        .WithMany("TblRolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermission_Role");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DBLayer.Models.TblUserRole", b =>
                {
                    b.HasOne("DBLayer.Models.TblRole", "Role")
                        .WithMany("TblUserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("DBLayer.Models.TblUser", "User")
                        .WithMany("TblUserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TblRoleHierarchy", b =>
                {
                    b.HasOne("DBLayer.Models.TblRole", null)
                        .WithMany()
                        .HasForeignKey("ChildRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleHierarchy_Child");

                    b.HasOne("DBLayer.Models.TblRole", null)
                        .WithMany()
                        .HasForeignKey("ParentRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleHierarchy_Parent");
                });

            modelBuilder.Entity("DBLayer.Models.TblActionType", b =>
                {
                    b.Navigation("TblPermissions");
                });

            modelBuilder.Entity("DBLayer.Models.TblPermission", b =>
                {
                    b.Navigation("TblRolePermissions");
                });

            modelBuilder.Entity("DBLayer.Models.TblResource", b =>
                {
                    b.Navigation("TblPermissions");
                });

            modelBuilder.Entity("DBLayer.Models.TblRole", b =>
                {
                    b.Navigation("TblRolePermissions");

                    b.Navigation("TblUserRoles");
                });

            modelBuilder.Entity("DBLayer.Models.TblTokenType", b =>
                {
                    b.Navigation("TblResetTokens");
                });

            modelBuilder.Entity("DBLayer.Models.TblUser", b =>
                {
                    b.Navigation("TblUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
